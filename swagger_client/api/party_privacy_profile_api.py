# coding: utf-8

"""
    Privacy

    **TMF API Reference : TMF - 644 Privacy**  **Release : 19.0 - June 2019**  The Privacy Management API provides standardized mechanism for privacy profile specification, privacy profiles and privacy agreements such as creation, update, retrieval, deletion and notification of events.Privacy management API manages the following data resources:  **Privacy Profile specification** Privacy profile specification represents a description for privacy profiles.Main privacy profile specification attributes are its identifier, name, description, version, last update, lifecycle status, validity period, characteristics and their values, related parties, applicable roles.  **Privacy Profile** Privacy profile represents the set of Privacy settings defined for a Party.Main privacy profile attributes are its identifier, name, description, date of creation, status, validity period, privacy profile specification, characteristics values, agreement, the party who has agreed and the party which the privacy is applicable for, typically the same party represents both the aggreged by and applicable for. In case of minor privacy the applicable for party is the minor and the agreed party is the parent.  **Privacy Agreement** Privacy agreement represents the approval made by the Party about a Party Privacy Profile.Main privacy agreement attributes are its identifier, name, description, agreement period, initial date, completion date, document number, statement of intent, status, type, version, agreement specification, agreement items, engaged party, agreement authorization, characteristics, associated agreements, privacy profile and privacy profile characteristic values. Privacy management API performs the following operations on privacy profile specification, privacy profiles and privacy agreements: -Retrieval of a privacy profile specification, a privacy profile or a privacy agreement, or of a collection of them depending on filter criteria -Partial update of a privacy profile specification, a privacy profile or a privacy agreement -Creation of a privacy profile specification, a privacy profile or a privacy agreement -Deletion of a privacy profile specification, a privacy profile or a privacy agreement (for administration purposes)  **Notification of events:** -privacy profile specification create -privacy profile specification update -privacy profile specification delete -privacy profile create -privacy profile update -privacy profile delete -privacy agreement create -privacy agreement update   Copyright Â© TM Forum 2019. All Rights Reserved     # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PartyPrivacyProfileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_party_privacy_profile(self, party_privacy_profile, **kwargs):  # noqa: E501
        """Creates a PartyPrivacyProfile  # noqa: E501

        This operation creates a PartyPrivacyProfile entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_party_privacy_profile(party_privacy_profile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileCreate party_privacy_profile: The PartyPrivacyProfile to be created (required)
        :return: PartyPrivacyProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_party_privacy_profile_with_http_info(party_privacy_profile, **kwargs)  # noqa: E501
        else:
            (data) = self.create_party_privacy_profile_with_http_info(party_privacy_profile, **kwargs)  # noqa: E501
            return data

    def create_party_privacy_profile_with_http_info(self, party_privacy_profile, **kwargs):  # noqa: E501
        """Creates a PartyPrivacyProfile  # noqa: E501

        This operation creates a PartyPrivacyProfile entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_party_privacy_profile_with_http_info(party_privacy_profile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileCreate party_privacy_profile: The PartyPrivacyProfile to be created (required)
        :return: PartyPrivacyProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['party_privacy_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_party_privacy_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'party_privacy_profile' is set
        if ('party_privacy_profile' not in params or
                params['party_privacy_profile'] is None):
            raise ValueError("Missing the required parameter `party_privacy_profile` when calling `create_party_privacy_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'party_privacy_profile' in params:
            body_params = params['party_privacy_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/partyPrivacyProfile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartyPrivacyProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_party_privacy_profile(self, id, **kwargs):  # noqa: E501
        """Deletes a PartyPrivacyProfile  # noqa: E501

        This operation deletes a PartyPrivacyProfile entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_party_privacy_profile(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the PartyPrivacyProfile (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_party_privacy_profile_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_party_privacy_profile_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_party_privacy_profile_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes a PartyPrivacyProfile  # noqa: E501

        This operation deletes a PartyPrivacyProfile entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_party_privacy_profile_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the PartyPrivacyProfile (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_party_privacy_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_party_privacy_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/partyPrivacyProfile/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_party_privacy_profile(self, **kwargs):  # noqa: E501
        """List or find PartyPrivacyProfile objects  # noqa: E501

        This operation list or find PartyPrivacyProfile entities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_party_privacy_profile(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fields: Comma-separated properties to be provided in response
        :param int offset: Requested index for start of resources to be provided in response
        :param int limit: Requested number of resources to be provided in response
        :return: list[PartyPrivacyProfile]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_party_privacy_profile_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_party_privacy_profile_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_party_privacy_profile_with_http_info(self, **kwargs):  # noqa: E501
        """List or find PartyPrivacyProfile objects  # noqa: E501

        This operation list or find PartyPrivacyProfile entities  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_party_privacy_profile_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fields: Comma-separated properties to be provided in response
        :param int offset: Requested index for start of resources to be provided in response
        :param int limit: Requested number of resources to be provided in response
        :return: list[PartyPrivacyProfile]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_party_privacy_profile" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/partyPrivacyProfile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PartyPrivacyProfile]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_party_privacy_profile(self, id, party_privacy_profile, **kwargs):  # noqa: E501
        """Updates partially a PartyPrivacyProfile  # noqa: E501

        This operation updates partially a PartyPrivacyProfile entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_party_privacy_profile(id, party_privacy_profile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the PartyPrivacyProfile (required)
        :param PartyPrivacyProfileUpdate party_privacy_profile: The PartyPrivacyProfile to be updated (required)
        :return: PartyPrivacyProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_party_privacy_profile_with_http_info(id, party_privacy_profile, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_party_privacy_profile_with_http_info(id, party_privacy_profile, **kwargs)  # noqa: E501
            return data

    def patch_party_privacy_profile_with_http_info(self, id, party_privacy_profile, **kwargs):  # noqa: E501
        """Updates partially a PartyPrivacyProfile  # noqa: E501

        This operation updates partially a PartyPrivacyProfile entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_party_privacy_profile_with_http_info(id, party_privacy_profile, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the PartyPrivacyProfile (required)
        :param PartyPrivacyProfileUpdate party_privacy_profile: The PartyPrivacyProfile to be updated (required)
        :return: PartyPrivacyProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'party_privacy_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_party_privacy_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_party_privacy_profile`")  # noqa: E501
        # verify the required parameter 'party_privacy_profile' is set
        if ('party_privacy_profile' not in params or
                params['party_privacy_profile'] is None):
            raise ValueError("Missing the required parameter `party_privacy_profile` when calling `patch_party_privacy_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'party_privacy_profile' in params:
            body_params = params['party_privacy_profile']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/partyPrivacyProfile/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartyPrivacyProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_party_privacy_profile(self, id, **kwargs):  # noqa: E501
        """Retrieves a PartyPrivacyProfile by ID  # noqa: E501

        This operation retrieves a PartyPrivacyProfile entity. Attribute selection is enabled for all first level attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_party_privacy_profile(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the PartyPrivacyProfile (required)
        :param str fields: Comma-separated properties to provide in response
        :return: PartyPrivacyProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_party_privacy_profile_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_party_privacy_profile_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_party_privacy_profile_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a PartyPrivacyProfile by ID  # noqa: E501

        This operation retrieves a PartyPrivacyProfile entity. Attribute selection is enabled for all first level attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_party_privacy_profile_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifier of the PartyPrivacyProfile (required)
        :param str fields: Comma-separated properties to provide in response
        :return: PartyPrivacyProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_party_privacy_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_party_privacy_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/partyPrivacyProfile/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartyPrivacyProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
