# coding: utf-8

"""
    Privacy

    **TMF API Reference : TMF - 644 Privacy**  **Release : 19.0 - June 2019**  The Privacy Management API provides standardized mechanism for privacy profile specification, privacy profiles and privacy agreements such as creation, update, retrieval, deletion and notification of events.Privacy management API manages the following data resources:  **Privacy Profile specification** Privacy profile specification represents a description for privacy profiles.Main privacy profile specification attributes are its identifier, name, description, version, last update, lifecycle status, validity period, characteristics and their values, related parties, applicable roles.  **Privacy Profile** Privacy profile represents the set of Privacy settings defined for a Party.Main privacy profile attributes are its identifier, name, description, date of creation, status, validity period, privacy profile specification, characteristics values, agreement, the party who has agreed and the party which the privacy is applicable for, typically the same party represents both the aggreged by and applicable for. In case of minor privacy the applicable for party is the minor and the agreed party is the parent.  **Privacy Agreement** Privacy agreement represents the approval made by the Party about a Party Privacy Profile.Main privacy agreement attributes are its identifier, name, description, agreement period, initial date, completion date, document number, statement of intent, status, type, version, agreement specification, agreement items, engaged party, agreement authorization, characteristics, associated agreements, privacy profile and privacy profile characteristic values. Privacy management API performs the following operations on privacy profile specification, privacy profiles and privacy agreements: -Retrieval of a privacy profile specification, a privacy profile or a privacy agreement, or of a collection of them depending on filter criteria -Partial update of a privacy profile specification, a privacy profile or a privacy agreement -Creation of a privacy profile specification, a privacy profile or a privacy agreement -Deletion of a privacy profile specification, a privacy profile or a privacy agreement (for administration purposes)  **Notification of events:** -privacy profile specification create -privacy profile specification update -privacy profile specification delete -privacy profile create -privacy profile update -privacy profile delete -privacy agreement create -privacy agreement update   Copyright Â© TM Forum 2019. All Rights Reserved     # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NotificationListenersClientSideApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def listen_to_party_privacy_agreement_attribute_value_change_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyAgreementAttributeValueChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyAgreementAttributeValueChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_agreement_attribute_value_change_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyAgreementAttributeValueChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_agreement_attribute_value_change_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_agreement_attribute_value_change_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_agreement_attribute_value_change_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyAgreementAttributeValueChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyAgreementAttributeValueChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_agreement_attribute_value_change_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyAgreementAttributeValueChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_agreement_attribute_value_change_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_agreement_attribute_value_change_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyAgreementAttributeValueChangeEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listen_to_party_privacy_agreement_create_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyAgreementCreateEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyAgreementCreateEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_agreement_create_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyAgreementCreateEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_agreement_create_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_agreement_create_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_agreement_create_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyAgreementCreateEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyAgreementCreateEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_agreement_create_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyAgreementCreateEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_agreement_create_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_agreement_create_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyAgreementCreateEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listen_to_party_privacy_agreement_delete_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyAgreementDeleteEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyAgreementDeleteEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_agreement_delete_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyAgreementDeleteEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_agreement_delete_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_agreement_delete_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_agreement_delete_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyAgreementDeleteEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyAgreementDeleteEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_agreement_delete_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyAgreementDeleteEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_agreement_delete_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_agreement_delete_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyAgreementDeleteEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listen_to_party_privacy_agreement_status_change_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyAgreementStatusChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyAgreementStatusChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_agreement_status_change_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyAgreementStatusChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_agreement_status_change_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_agreement_status_change_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_agreement_status_change_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyAgreementStatusChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyAgreementStatusChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_agreement_status_change_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyAgreementStatusChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_agreement_status_change_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_agreement_status_change_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyAgreementStatusChangeEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listen_to_party_privacy_profile_attribute_value_change_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileAttributeValueChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileAttributeValueChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_attribute_value_change_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileAttributeValueChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_profile_attribute_value_change_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_profile_attribute_value_change_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_profile_attribute_value_change_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileAttributeValueChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileAttributeValueChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_attribute_value_change_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileAttributeValueChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_profile_attribute_value_change_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_profile_attribute_value_change_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyProfileAttributeValueChangeEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listen_to_party_privacy_profile_create_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileCreateEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileCreateEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_create_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileCreateEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_profile_create_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_profile_create_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_profile_create_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileCreateEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileCreateEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_create_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileCreateEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_profile_create_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_profile_create_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyProfileCreateEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listen_to_party_privacy_profile_delete_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileDeleteEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileDeleteEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_delete_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileDeleteEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_profile_delete_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_profile_delete_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_profile_delete_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileDeleteEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileDeleteEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_delete_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileDeleteEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_profile_delete_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_profile_delete_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyProfileDeleteEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listen_to_party_privacy_profile_specification_attribute_value_change_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileSpecificationAttributeValueChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationAttributeValueChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_specification_attribute_value_change_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileSpecificationAttributeValueChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_profile_specification_attribute_value_change_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_profile_specification_attribute_value_change_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_profile_specification_attribute_value_change_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileSpecificationAttributeValueChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationAttributeValueChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_specification_attribute_value_change_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileSpecificationAttributeValueChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_profile_specification_attribute_value_change_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_profile_specification_attribute_value_change_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyProfileSpecificationAttributeValueChangeEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listen_to_party_privacy_profile_specification_create_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileSpecificationCreateEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationCreateEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_specification_create_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileSpecificationCreateEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_profile_specification_create_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_profile_specification_create_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_profile_specification_create_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileSpecificationCreateEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationCreateEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_specification_create_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileSpecificationCreateEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_profile_specification_create_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_profile_specification_create_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyProfileSpecificationCreateEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listen_to_party_privacy_profile_specification_delete_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileSpecificationDeleteEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationDeleteEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_specification_delete_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileSpecificationDeleteEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_profile_specification_delete_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_profile_specification_delete_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_profile_specification_delete_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileSpecificationDeleteEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationDeleteEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_specification_delete_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileSpecificationDeleteEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_profile_specification_delete_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_profile_specification_delete_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyProfileSpecificationDeleteEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listen_to_party_privacy_profile_specification_status_change_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileSpecificationStatusChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationStatusChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_specification_status_change_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileSpecificationStatusChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_profile_specification_status_change_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_profile_specification_status_change_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_profile_specification_status_change_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileSpecificationStatusChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileSpecificationStatusChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_specification_status_change_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileSpecificationStatusChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_profile_specification_status_change_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_profile_specification_status_change_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyProfileSpecificationStatusChangeEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def listen_to_party_privacy_profile_status_change_event(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileStatusChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileStatusChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_status_change_event(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileStatusChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.listen_to_party_privacy_profile_status_change_event_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.listen_to_party_privacy_profile_status_change_event_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def listen_to_party_privacy_profile_status_change_event_with_http_info(self, data, **kwargs):  # noqa: E501
        """Client listener for entity PartyPrivacyProfileStatusChangeEvent  # noqa: E501

        Example of a client listener for receiving the notification PartyPrivacyProfileStatusChangeEvent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.listen_to_party_privacy_profile_status_change_event_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartyPrivacyProfileStatusChangeEvent data: The event data (required)
        :return: EventSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listen_to_party_privacy_profile_status_change_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `listen_to_party_privacy_profile_status_change_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listener/partyPrivacyProfileStatusChangeEvent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSubscription',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
