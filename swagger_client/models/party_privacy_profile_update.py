# coding: utf-8

"""
    Privacy

    **TMF API Reference : TMF - 644 Privacy**  **Release : 19.0 - June 2019**  The Privacy Management API provides standardized mechanism for privacy profile specification, privacy profiles and privacy agreements such as creation, update, retrieval, deletion and notification of events.Privacy management API manages the following data resources:  **Privacy Profile specification** Privacy profile specification represents a description for privacy profiles.Main privacy profile specification attributes are its identifier, name, description, version, last update, lifecycle status, validity period, characteristics and their values, related parties, applicable roles.  **Privacy Profile** Privacy profile represents the set of Privacy settings defined for a Party.Main privacy profile attributes are its identifier, name, description, date of creation, status, validity period, privacy profile specification, characteristics values, agreement, the party who has agreed and the party which the privacy is applicable for, typically the same party represents both the aggreged by and applicable for. In case of minor privacy the applicable for party is the minor and the agreed party is the parent.  **Privacy Agreement** Privacy agreement represents the approval made by the Party about a Party Privacy Profile.Main privacy agreement attributes are its identifier, name, description, agreement period, initial date, completion date, document number, statement of intent, status, type, version, agreement specification, agreement items, engaged party, agreement authorization, characteristics, associated agreements, privacy profile and privacy profile characteristic values. Privacy management API performs the following operations on privacy profile specification, privacy profiles and privacy agreements: -Retrieval of a privacy profile specification, a privacy profile or a privacy agreement, or of a collection of them depending on filter criteria -Partial update of a privacy profile specification, a privacy profile or a privacy agreement -Creation of a privacy profile specification, a privacy profile or a privacy agreement -Deletion of a privacy profile specification, a privacy profile or a privacy agreement (for administration purposes)  **Notification of events:** -privacy profile specification create -privacy profile specification update -privacy profile specification delete -privacy profile create -privacy profile update -privacy profile delete -privacy agreement create -privacy agreement update   Copyright Â© TM Forum 2019. All Rights Reserved     # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PartyPrivacyProfileUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'name': 'str',
        'status': 'str',
        'agreed_by_party': 'RelatedParty',
        'agreement': 'PartyPrivacyAgreementRef',
        'applicable_for_party': 'RelatedParty',
        'party_privacy_profile_characteristic': 'list[PartyPrivacyProfileCharacteristic]',
        'party_privacy_profile_specification': 'PartyPrivacyProfileSpecificationRef',
        'valid_for': 'TimePeriod',
        'base_type': 'str',
        'schema_location': 'str',
        'type': 'str'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'status': 'status',
        'agreed_by_party': 'agreedByParty',
        'agreement': 'agreement',
        'applicable_for_party': 'applicableForParty',
        'party_privacy_profile_characteristic': 'partyPrivacyProfileCharacteristic',
        'party_privacy_profile_specification': 'partyPrivacyProfileSpecification',
        'valid_for': 'validFor',
        'base_type': '@baseType',
        'schema_location': '@schemaLocation',
        'type': '@type'
    }

    def __init__(self, description=None, name=None, status=None, agreed_by_party=None, agreement=None, applicable_for_party=None, party_privacy_profile_characteristic=None, party_privacy_profile_specification=None, valid_for=None, base_type=None, schema_location=None, type=None):  # noqa: E501
        """PartyPrivacyProfileUpdate - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._name = None
        self._status = None
        self._agreed_by_party = None
        self._agreement = None
        self._applicable_for_party = None
        self._party_privacy_profile_characteristic = None
        self._party_privacy_profile_specification = None
        self._valid_for = None
        self._base_type = None
        self._schema_location = None
        self._type = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        self.agreed_by_party = agreed_by_party
        if agreement is not None:
            self.agreement = agreement
        if applicable_for_party is not None:
            self.applicable_for_party = applicable_for_party
        if party_privacy_profile_characteristic is not None:
            self.party_privacy_profile_characteristic = party_privacy_profile_characteristic
        if party_privacy_profile_specification is not None:
            self.party_privacy_profile_specification = party_privacy_profile_specification
        if valid_for is not None:
            self.valid_for = valid_for
        if base_type is not None:
            self.base_type = base_type
        if schema_location is not None:
            self.schema_location = schema_location
        if type is not None:
            self.type = type

    @property
    def description(self):
        """Gets the description of this PartyPrivacyProfileUpdate.  # noqa: E501

        Description of the privacy profile  # noqa: E501

        :return: The description of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PartyPrivacyProfileUpdate.

        Description of the privacy profile  # noqa: E501

        :param description: The description of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this PartyPrivacyProfileUpdate.  # noqa: E501

        Name of the privacy profile  # noqa: E501

        :return: The name of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PartyPrivacyProfileUpdate.

        Name of the privacy profile  # noqa: E501

        :param name: The name of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this PartyPrivacyProfileUpdate.  # noqa: E501

        The status of this profile (such as agreed, created, terminated, etc.)  # noqa: E501

        :return: The status of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PartyPrivacyProfileUpdate.

        The status of this profile (such as agreed, created, terminated, etc.)  # noqa: E501

        :param status: The status of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def agreed_by_party(self):
        """Gets the agreed_by_party of this PartyPrivacyProfileUpdate.  # noqa: E501

        The party who agreed to the privacy profile. Not necessarily the party to whom the profile applies.  # noqa: E501

        :return: The agreed_by_party of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: RelatedParty
        """
        return self._agreed_by_party

    @agreed_by_party.setter
    def agreed_by_party(self, agreed_by_party):
        """Sets the agreed_by_party of this PartyPrivacyProfileUpdate.

        The party who agreed to the privacy profile. Not necessarily the party to whom the profile applies.  # noqa: E501

        :param agreed_by_party: The agreed_by_party of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: RelatedParty
        """
        if agreed_by_party is None:
            raise ValueError("Invalid value for `agreed_by_party`, must not be `None`")  # noqa: E501

        self._agreed_by_party = agreed_by_party

    @property
    def agreement(self):
        """Gets the agreement of this PartyPrivacyProfileUpdate.  # noqa: E501

        An agreement under which the privacy profile was produced.  # noqa: E501

        :return: The agreement of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: PartyPrivacyAgreementRef
        """
        return self._agreement

    @agreement.setter
    def agreement(self, agreement):
        """Sets the agreement of this PartyPrivacyProfileUpdate.

        An agreement under which the privacy profile was produced.  # noqa: E501

        :param agreement: The agreement of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: PartyPrivacyAgreementRef
        """

        self._agreement = agreement

    @property
    def applicable_for_party(self):
        """Gets the applicable_for_party of this PartyPrivacyProfileUpdate.  # noqa: E501

        The party to whom the privacy profile applies. Could be a minor where the agreeing party is a parent, an organization where the agreeing party is authorized to make such agreements, or some individual for whom the agreeing party has authorization (e.g. power of attorney). If empty, the agreeing party is the party to whom the profile applies.  # noqa: E501

        :return: The applicable_for_party of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: RelatedParty
        """
        return self._applicable_for_party

    @applicable_for_party.setter
    def applicable_for_party(self, applicable_for_party):
        """Sets the applicable_for_party of this PartyPrivacyProfileUpdate.

        The party to whom the privacy profile applies. Could be a minor where the agreeing party is a parent, an organization where the agreeing party is authorized to make such agreements, or some individual for whom the agreeing party has authorization (e.g. power of attorney). If empty, the agreeing party is the party to whom the profile applies.  # noqa: E501

        :param applicable_for_party: The applicable_for_party of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: RelatedParty
        """

        self._applicable_for_party = applicable_for_party

    @property
    def party_privacy_profile_characteristic(self):
        """Gets the party_privacy_profile_characteristic of this PartyPrivacyProfileUpdate.  # noqa: E501

        List of characteristics of the privacy profile  # noqa: E501

        :return: The party_privacy_profile_characteristic of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: list[PartyPrivacyProfileCharacteristic]
        """
        return self._party_privacy_profile_characteristic

    @party_privacy_profile_characteristic.setter
    def party_privacy_profile_characteristic(self, party_privacy_profile_characteristic):
        """Sets the party_privacy_profile_characteristic of this PartyPrivacyProfileUpdate.

        List of characteristics of the privacy profile  # noqa: E501

        :param party_privacy_profile_characteristic: The party_privacy_profile_characteristic of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: list[PartyPrivacyProfileCharacteristic]
        """

        self._party_privacy_profile_characteristic = party_privacy_profile_characteristic

    @property
    def party_privacy_profile_specification(self):
        """Gets the party_privacy_profile_specification of this PartyPrivacyProfileUpdate.  # noqa: E501

        The specification from which this profile was instantiated  # noqa: E501

        :return: The party_privacy_profile_specification of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: PartyPrivacyProfileSpecificationRef
        """
        return self._party_privacy_profile_specification

    @party_privacy_profile_specification.setter
    def party_privacy_profile_specification(self, party_privacy_profile_specification):
        """Sets the party_privacy_profile_specification of this PartyPrivacyProfileUpdate.

        The specification from which this profile was instantiated  # noqa: E501

        :param party_privacy_profile_specification: The party_privacy_profile_specification of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: PartyPrivacyProfileSpecificationRef
        """

        self._party_privacy_profile_specification = party_privacy_profile_specification

    @property
    def valid_for(self):
        """Gets the valid_for of this PartyPrivacyProfileUpdate.  # noqa: E501

        The period of time for which this profile is valid, depending on regulations or business consideration the profile may expire and need to be renegotiated.  # noqa: E501

        :return: The valid_for of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: TimePeriod
        """
        return self._valid_for

    @valid_for.setter
    def valid_for(self, valid_for):
        """Sets the valid_for of this PartyPrivacyProfileUpdate.

        The period of time for which this profile is valid, depending on regulations or business consideration the profile may expire and need to be renegotiated.  # noqa: E501

        :param valid_for: The valid_for of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: TimePeriod
        """

        self._valid_for = valid_for

    @property
    def base_type(self):
        """Gets the base_type of this PartyPrivacyProfileUpdate.  # noqa: E501

        When sub-classing, this defines the super-class  # noqa: E501

        :return: The base_type of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: str
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type):
        """Sets the base_type of this PartyPrivacyProfileUpdate.

        When sub-classing, this defines the super-class  # noqa: E501

        :param base_type: The base_type of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: str
        """

        self._base_type = base_type

    @property
    def schema_location(self):
        """Gets the schema_location of this PartyPrivacyProfileUpdate.  # noqa: E501

        A URI to a JSON-Schema file that defines additional attributes and relationships  # noqa: E501

        :return: The schema_location of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: str
        """
        return self._schema_location

    @schema_location.setter
    def schema_location(self, schema_location):
        """Sets the schema_location of this PartyPrivacyProfileUpdate.

        A URI to a JSON-Schema file that defines additional attributes and relationships  # noqa: E501

        :param schema_location: The schema_location of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: str
        """

        self._schema_location = schema_location

    @property
    def type(self):
        """Gets the type of this PartyPrivacyProfileUpdate.  # noqa: E501

        When sub-classing, this defines the sub-class entity name  # noqa: E501

        :return: The type of this PartyPrivacyProfileUpdate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PartyPrivacyProfileUpdate.

        When sub-classing, this defines the sub-class entity name  # noqa: E501

        :param type: The type of this PartyPrivacyProfileUpdate.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartyPrivacyProfileUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartyPrivacyProfileUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
