# coding: utf-8

"""
    Privacy

    **TMF API Reference : TMF - 644 Privacy**  **Release : 19.0 - June 2019**  The Privacy Management API provides standardized mechanism for privacy profile specification, privacy profiles and privacy agreements such as creation, update, retrieval, deletion and notification of events.Privacy management API manages the following data resources:  **Privacy Profile specification** Privacy profile specification represents a description for privacy profiles.Main privacy profile specification attributes are its identifier, name, description, version, last update, lifecycle status, validity period, characteristics and their values, related parties, applicable roles.  **Privacy Profile** Privacy profile represents the set of Privacy settings defined for a Party.Main privacy profile attributes are its identifier, name, description, date of creation, status, validity period, privacy profile specification, characteristics values, agreement, the party who has agreed and the party which the privacy is applicable for, typically the same party represents both the aggreged by and applicable for. In case of minor privacy the applicable for party is the minor and the agreed party is the parent.  **Privacy Agreement** Privacy agreement represents the approval made by the Party about a Party Privacy Profile.Main privacy agreement attributes are its identifier, name, description, agreement period, initial date, completion date, document number, statement of intent, status, type, version, agreement specification, agreement items, engaged party, agreement authorization, characteristics, associated agreements, privacy profile and privacy profile characteristic values. Privacy management API performs the following operations on privacy profile specification, privacy profiles and privacy agreements: -Retrieval of a privacy profile specification, a privacy profile or a privacy agreement, or of a collection of them depending on filter criteria -Partial update of a privacy profile specification, a privacy profile or a privacy agreement -Creation of a privacy profile specification, a privacy profile or a privacy agreement -Deletion of a privacy profile specification, a privacy profile or a privacy agreement (for administration purposes)  **Notification of events:** -privacy profile specification create -privacy profile specification update -privacy profile specification delete -privacy profile create -privacy profile update -privacy profile delete -privacy agreement create -privacy agreement update   Copyright Â© TM Forum 2019. All Rights Reserved     # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PartyPrivacyProfileSpecificationDeleteEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'href': 'str',
        'event_id': 'str',
        'event_time': 'datetime',
        'event_type': 'str',
        'correlation_id': 'str',
        'domain': 'str',
        'title': 'str',
        'description': 'str',
        'priority': 'str',
        'time_ocurred': 'datetime',
        'event': 'PartyPrivacyProfileSpecificationDeleteEventPayload'
    }

    attribute_map = {
        'id': 'id',
        'href': 'href',
        'event_id': 'eventId',
        'event_time': 'eventTime',
        'event_type': 'eventType',
        'correlation_id': 'correlationId',
        'domain': 'domain',
        'title': 'title',
        'description': 'description',
        'priority': 'priority',
        'time_ocurred': 'timeOcurred',
        'event': 'event'
    }

    def __init__(self, id=None, href=None, event_id=None, event_time=None, event_type=None, correlation_id=None, domain=None, title=None, description=None, priority=None, time_ocurred=None, event=None):  # noqa: E501
        """PartyPrivacyProfileSpecificationDeleteEvent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._href = None
        self._event_id = None
        self._event_time = None
        self._event_type = None
        self._correlation_id = None
        self._domain = None
        self._title = None
        self._description = None
        self._priority = None
        self._time_ocurred = None
        self._event = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if event_id is not None:
            self.event_id = event_id
        if event_time is not None:
            self.event_time = event_time
        if event_type is not None:
            self.event_type = event_type
        if correlation_id is not None:
            self.correlation_id = correlation_id
        if domain is not None:
            self.domain = domain
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if priority is not None:
            self.priority = priority
        if time_ocurred is not None:
            self.time_ocurred = time_ocurred
        if event is not None:
            self.event = event

    @property
    def id(self):
        """Gets the id of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        Identifier of the Process flow  # noqa: E501

        :return: The id of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartyPrivacyProfileSpecificationDeleteEvent.

        Identifier of the Process flow  # noqa: E501

        :param id: The id of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        Reference of the ProcessFlow  # noqa: E501

        :return: The href of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this PartyPrivacyProfileSpecificationDeleteEvent.

        Reference of the ProcessFlow  # noqa: E501

        :param href: The href of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def event_id(self):
        """Gets the event_id of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        The identifier of the notification.  # noqa: E501

        :return: The event_id of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this PartyPrivacyProfileSpecificationDeleteEvent.

        The identifier of the notification.  # noqa: E501

        :param event_id: The event_id of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: str
        """

        self._event_id = event_id

    @property
    def event_time(self):
        """Gets the event_time of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        Time of the event occurrence.  # noqa: E501

        :return: The event_time of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this PartyPrivacyProfileSpecificationDeleteEvent.

        Time of the event occurrence.  # noqa: E501

        :param event_time: The event_time of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: datetime
        """

        self._event_time = event_time

    @property
    def event_type(self):
        """Gets the event_type of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        The type of the notification.  # noqa: E501

        :return: The event_type of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this PartyPrivacyProfileSpecificationDeleteEvent.

        The type of the notification.  # noqa: E501

        :param event_type: The event_type of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def correlation_id(self):
        """Gets the correlation_id of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        The correlation id for this event.  # noqa: E501

        :return: The correlation_id of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this PartyPrivacyProfileSpecificationDeleteEvent.

        The correlation id for this event.  # noqa: E501

        :param correlation_id: The correlation_id of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    @property
    def domain(self):
        """Gets the domain of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        The domain of the event.  # noqa: E501

        :return: The domain of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PartyPrivacyProfileSpecificationDeleteEvent.

        The domain of the event.  # noqa: E501

        :param domain: The domain of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def title(self):
        """Gets the title of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        The title of the event.  # noqa: E501

        :return: The title of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PartyPrivacyProfileSpecificationDeleteEvent.

        The title of the event.  # noqa: E501

        :param title: The title of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        An explnatory of the event.  # noqa: E501

        :return: The description of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PartyPrivacyProfileSpecificationDeleteEvent.

        An explnatory of the event.  # noqa: E501

        :param description: The description of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def priority(self):
        """Gets the priority of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        A priority.  # noqa: E501

        :return: The priority of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PartyPrivacyProfileSpecificationDeleteEvent.

        A priority.  # noqa: E501

        :param priority: The priority of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def time_ocurred(self):
        """Gets the time_ocurred of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        The time the event occured.  # noqa: E501

        :return: The time_ocurred of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._time_ocurred

    @time_ocurred.setter
    def time_ocurred(self, time_ocurred):
        """Sets the time_ocurred of this PartyPrivacyProfileSpecificationDeleteEvent.

        The time the event occured.  # noqa: E501

        :param time_ocurred: The time_ocurred of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: datetime
        """

        self._time_ocurred = time_ocurred

    @property
    def event(self):
        """Gets the event of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501

        The event payload linked to the involved resource object  # noqa: E501

        :return: The event of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :rtype: PartyPrivacyProfileSpecificationDeleteEventPayload
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this PartyPrivacyProfileSpecificationDeleteEvent.

        The event payload linked to the involved resource object  # noqa: E501

        :param event: The event of this PartyPrivacyProfileSpecificationDeleteEvent.  # noqa: E501
        :type: PartyPrivacyProfileSpecificationDeleteEventPayload
        """

        self._event = event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartyPrivacyProfileSpecificationDeleteEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartyPrivacyProfileSpecificationDeleteEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
