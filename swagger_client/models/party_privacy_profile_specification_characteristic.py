# coding: utf-8

"""
    Privacy

    **TMF API Reference : TMF - 644 Privacy**  **Release : 19.0 - June 2019**  The Privacy Management API provides standardized mechanism for privacy profile specification, privacy profiles and privacy agreements such as creation, update, retrieval, deletion and notification of events.Privacy management API manages the following data resources:  **Privacy Profile specification** Privacy profile specification represents a description for privacy profiles.Main privacy profile specification attributes are its identifier, name, description, version, last update, lifecycle status, validity period, characteristics and their values, related parties, applicable roles.  **Privacy Profile** Privacy profile represents the set of Privacy settings defined for a Party.Main privacy profile attributes are its identifier, name, description, date of creation, status, validity period, privacy profile specification, characteristics values, agreement, the party who has agreed and the party which the privacy is applicable for, typically the same party represents both the aggreged by and applicable for. In case of minor privacy the applicable for party is the minor and the agreed party is the parent.  **Privacy Agreement** Privacy agreement represents the approval made by the Party about a Party Privacy Profile.Main privacy agreement attributes are its identifier, name, description, agreement period, initial date, completion date, document number, statement of intent, status, type, version, agreement specification, agreement items, engaged party, agreement authorization, characteristics, associated agreements, privacy profile and privacy profile characteristic values. Privacy management API performs the following operations on privacy profile specification, privacy profiles and privacy agreements: -Retrieval of a privacy profile specification, a privacy profile or a privacy agreement, or of a collection of them depending on filter criteria -Partial update of a privacy profile specification, a privacy profile or a privacy agreement -Creation of a privacy profile specification, a privacy profile or a privacy agreement -Deletion of a privacy profile specification, a privacy profile or a privacy agreement (for administration purposes)  **Notification of events:** -privacy profile specification create -privacy profile specification update -privacy profile specification delete -privacy profile create -privacy profile update -privacy profile delete -privacy agreement create -privacy agreement update   Copyright Â© TM Forum 2019. All Rights Reserved     # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PartyPrivacyProfileSpecificationCharacteristic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'criticality_level': 'str',
        'description': 'str',
        'name': 'str',
        'privacy_type': 'str',
        'privacy_usage_purpose': 'str',
        'allowed_role': 'list[RoleSpecification]',
        'party_privacy_profile_spec_characteristic_value': 'list[SpecificationCharacteristicValue]',
        'valid_for': 'TimePeriod',
        'base_type': 'str',
        'schema_location': 'str',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'criticality_level': 'criticalityLevel',
        'description': 'description',
        'name': 'name',
        'privacy_type': 'privacyType',
        'privacy_usage_purpose': 'privacyUsagePurpose',
        'allowed_role': 'allowedRole',
        'party_privacy_profile_spec_characteristic_value': 'partyPrivacyProfileSpecCharacteristicValue',
        'valid_for': 'validFor',
        'base_type': '@baseType',
        'schema_location': '@schemaLocation',
        'type': '@type'
    }

    def __init__(self, id=None, criticality_level=None, description=None, name=None, privacy_type=None, privacy_usage_purpose=None, allowed_role=None, party_privacy_profile_spec_characteristic_value=None, valid_for=None, base_type=None, schema_location=None, type=None):  # noqa: E501
        """PartyPrivacyProfileSpecificationCharacteristic - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._criticality_level = None
        self._description = None
        self._name = None
        self._privacy_type = None
        self._privacy_usage_purpose = None
        self._allowed_role = None
        self._party_privacy_profile_spec_characteristic_value = None
        self._valid_for = None
        self._base_type = None
        self._schema_location = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if criticality_level is not None:
            self.criticality_level = criticality_level
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if privacy_type is not None:
            self.privacy_type = privacy_type
        if privacy_usage_purpose is not None:
            self.privacy_usage_purpose = privacy_usage_purpose
        if allowed_role is not None:
            self.allowed_role = allowed_role
        if party_privacy_profile_spec_characteristic_value is not None:
            self.party_privacy_profile_spec_characteristic_value = party_privacy_profile_spec_characteristic_value
        if valid_for is not None:
            self.valid_for = valid_for
        if base_type is not None:
            self.base_type = base_type
        if schema_location is not None:
            self.schema_location = schema_location
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501


        :return: The id of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartyPrivacyProfileSpecificationCharacteristic.


        :param id: The id of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def criticality_level(self):
        """Gets the criticality_level of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501

        Level of criticality for this characteristic of personal identifiable information (e.g. in terms of the damage if this item was breached), such as low, medium, high.  # noqa: E501

        :return: The criticality_level of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: str
        """
        return self._criticality_level

    @criticality_level.setter
    def criticality_level(self, criticality_level):
        """Sets the criticality_level of this PartyPrivacyProfileSpecificationCharacteristic.

        Level of criticality for this characteristic of personal identifiable information (e.g. in terms of the damage if this item was breached), such as low, medium, high.  # noqa: E501

        :param criticality_level: The criticality_level of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: str
        """

        self._criticality_level = criticality_level

    @property
    def description(self):
        """Gets the description of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501

        Description of the characteristic  # noqa: E501

        :return: The description of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PartyPrivacyProfileSpecificationCharacteristic.

        Description of the characteristic  # noqa: E501

        :param description: The description of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501

        Name of the characteristic  # noqa: E501

        :return: The name of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PartyPrivacyProfileSpecificationCharacteristic.

        Name of the characteristic  # noqa: E501

        :param name: The name of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def privacy_type(self):
        """Gets the privacy_type of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501

        Type of privacy (e.g. Internal Purpose, External Purpose, Internal Retention, External Retention)  # noqa: E501

        :return: The privacy_type of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: str
        """
        return self._privacy_type

    @privacy_type.setter
    def privacy_type(self, privacy_type):
        """Sets the privacy_type of this PartyPrivacyProfileSpecificationCharacteristic.

        Type of privacy (e.g. Internal Purpose, External Purpose, Internal Retention, External Retention)  # noqa: E501

        :param privacy_type: The privacy_type of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: str
        """

        self._privacy_type = privacy_type

    @property
    def privacy_usage_purpose(self):
        """Gets the privacy_usage_purpose of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501

        Defines the purpose authorized or refused for the characteristic (e.g. ADMIN, INFORMATION, MARKETING, RESEARCH).  # noqa: E501

        :return: The privacy_usage_purpose of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: str
        """
        return self._privacy_usage_purpose

    @privacy_usage_purpose.setter
    def privacy_usage_purpose(self, privacy_usage_purpose):
        """Sets the privacy_usage_purpose of this PartyPrivacyProfileSpecificationCharacteristic.

        Defines the purpose authorized or refused for the characteristic (e.g. ADMIN, INFORMATION, MARKETING, RESEARCH).  # noqa: E501

        :param privacy_usage_purpose: The privacy_usage_purpose of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: str
        """

        self._privacy_usage_purpose = privacy_usage_purpose

    @property
    def allowed_role(self):
        """Gets the allowed_role of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501

        A list of roles in the organization who are allowed access to this characteristic  # noqa: E501

        :return: The allowed_role of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: list[RoleSpecification]
        """
        return self._allowed_role

    @allowed_role.setter
    def allowed_role(self, allowed_role):
        """Sets the allowed_role of this PartyPrivacyProfileSpecificationCharacteristic.

        A list of roles in the organization who are allowed access to this characteristic  # noqa: E501

        :param allowed_role: The allowed_role of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: list[RoleSpecification]
        """

        self._allowed_role = allowed_role

    @property
    def party_privacy_profile_spec_characteristic_value(self):
        """Gets the party_privacy_profile_spec_characteristic_value of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501

        List of values that can be assigned to this characteristic at runtime  # noqa: E501

        :return: The party_privacy_profile_spec_characteristic_value of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: list[SpecificationCharacteristicValue]
        """
        return self._party_privacy_profile_spec_characteristic_value

    @party_privacy_profile_spec_characteristic_value.setter
    def party_privacy_profile_spec_characteristic_value(self, party_privacy_profile_spec_characteristic_value):
        """Sets the party_privacy_profile_spec_characteristic_value of this PartyPrivacyProfileSpecificationCharacteristic.

        List of values that can be assigned to this characteristic at runtime  # noqa: E501

        :param party_privacy_profile_spec_characteristic_value: The party_privacy_profile_spec_characteristic_value of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: list[SpecificationCharacteristicValue]
        """

        self._party_privacy_profile_spec_characteristic_value = party_privacy_profile_spec_characteristic_value

    @property
    def valid_for(self):
        """Gets the valid_for of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501

        The period of time for which this characteristic specification is valid.  # noqa: E501

        :return: The valid_for of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: TimePeriod
        """
        return self._valid_for

    @valid_for.setter
    def valid_for(self, valid_for):
        """Sets the valid_for of this PartyPrivacyProfileSpecificationCharacteristic.

        The period of time for which this characteristic specification is valid.  # noqa: E501

        :param valid_for: The valid_for of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: TimePeriod
        """

        self._valid_for = valid_for

    @property
    def base_type(self):
        """Gets the base_type of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501

        When sub-classing, this defines the super-class  # noqa: E501

        :return: The base_type of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: str
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type):
        """Sets the base_type of this PartyPrivacyProfileSpecificationCharacteristic.

        When sub-classing, this defines the super-class  # noqa: E501

        :param base_type: The base_type of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: str
        """

        self._base_type = base_type

    @property
    def schema_location(self):
        """Gets the schema_location of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501

        A URI to a JSON-Schema file that defines additional attributes and relationships  # noqa: E501

        :return: The schema_location of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: str
        """
        return self._schema_location

    @schema_location.setter
    def schema_location(self, schema_location):
        """Sets the schema_location of this PartyPrivacyProfileSpecificationCharacteristic.

        A URI to a JSON-Schema file that defines additional attributes and relationships  # noqa: E501

        :param schema_location: The schema_location of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: str
        """

        self._schema_location = schema_location

    @property
    def type(self):
        """Gets the type of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501

        When sub-classing, this defines the sub-class entity name  # noqa: E501

        :return: The type of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PartyPrivacyProfileSpecificationCharacteristic.

        When sub-classing, this defines the sub-class entity name  # noqa: E501

        :param type: The type of this PartyPrivacyProfileSpecificationCharacteristic.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartyPrivacyProfileSpecificationCharacteristic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartyPrivacyProfileSpecificationCharacteristic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
