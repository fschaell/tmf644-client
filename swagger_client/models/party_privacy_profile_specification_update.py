# coding: utf-8

"""
    Privacy

    **TMF API Reference : TMF - 644 Privacy**  **Release : 19.0 - June 2019**  The Privacy Management API provides standardized mechanism for privacy profile specification, privacy profiles and privacy agreements such as creation, update, retrieval, deletion and notification of events.Privacy management API manages the following data resources:  **Privacy Profile specification** Privacy profile specification represents a description for privacy profiles.Main privacy profile specification attributes are its identifier, name, description, version, last update, lifecycle status, validity period, characteristics and their values, related parties, applicable roles.  **Privacy Profile** Privacy profile represents the set of Privacy settings defined for a Party.Main privacy profile attributes are its identifier, name, description, date of creation, status, validity period, privacy profile specification, characteristics values, agreement, the party who has agreed and the party which the privacy is applicable for, typically the same party represents both the aggreged by and applicable for. In case of minor privacy the applicable for party is the minor and the agreed party is the parent.  **Privacy Agreement** Privacy agreement represents the approval made by the Party about a Party Privacy Profile.Main privacy agreement attributes are its identifier, name, description, agreement period, initial date, completion date, document number, statement of intent, status, type, version, agreement specification, agreement items, engaged party, agreement authorization, characteristics, associated agreements, privacy profile and privacy profile characteristic values. Privacy management API performs the following operations on privacy profile specification, privacy profiles and privacy agreements: -Retrieval of a privacy profile specification, a privacy profile or a privacy agreement, or of a collection of them depending on filter criteria -Partial update of a privacy profile specification, a privacy profile or a privacy agreement -Creation of a privacy profile specification, a privacy profile or a privacy agreement -Deletion of a privacy profile specification, a privacy profile or a privacy agreement (for administration purposes)  **Notification of events:** -privacy profile specification create -privacy profile specification update -privacy profile specification delete -privacy profile create -privacy profile update -privacy profile delete -privacy agreement create -privacy agreement update   Copyright Â© TM Forum 2019. All Rights Reserved     # noqa: E501

    OpenAPI spec version: 4.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PartyPrivacyProfileSpecificationUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'last_update': 'datetime',
        'name': 'str',
        'status': 'str',
        'version': 'str',
        'applicable_role': 'list[PartyPrivacyRoleSpecification]',
        'party_privacy_profile_spec_characteristic': 'list[PartyPrivacyProfileSpecificationCharacteristic]',
        'product_offering': 'list[ProductOfferingRef]',
        'related_party': 'list[RelatedParty]',
        'valid_for': 'TimePeriod',
        'base_type': 'str',
        'schema_location': 'str',
        'type': 'str'
    }

    attribute_map = {
        'description': 'description',
        'last_update': 'lastUpdate',
        'name': 'name',
        'status': 'status',
        'version': 'version',
        'applicable_role': 'applicableRole',
        'party_privacy_profile_spec_characteristic': 'partyPrivacyProfileSpecCharacteristic',
        'product_offering': 'productOffering',
        'related_party': 'relatedParty',
        'valid_for': 'validFor',
        'base_type': '@baseType',
        'schema_location': '@schemaLocation',
        'type': '@type'
    }

    def __init__(self, description=None, last_update=None, name=None, status=None, version=None, applicable_role=None, party_privacy_profile_spec_characteristic=None, product_offering=None, related_party=None, valid_for=None, base_type=None, schema_location=None, type=None):  # noqa: E501
        """PartyPrivacyProfileSpecificationUpdate - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._last_update = None
        self._name = None
        self._status = None
        self._version = None
        self._applicable_role = None
        self._party_privacy_profile_spec_characteristic = None
        self._product_offering = None
        self._related_party = None
        self._valid_for = None
        self._base_type = None
        self._schema_location = None
        self._type = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if last_update is not None:
            self.last_update = last_update
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if version is not None:
            self.version = version
        if applicable_role is not None:
            self.applicable_role = applicable_role
        if party_privacy_profile_spec_characteristic is not None:
            self.party_privacy_profile_spec_characteristic = party_privacy_profile_spec_characteristic
        if product_offering is not None:
            self.product_offering = product_offering
        if related_party is not None:
            self.related_party = related_party
        if valid_for is not None:
            self.valid_for = valid_for
        if base_type is not None:
            self.base_type = base_type
        if schema_location is not None:
            self.schema_location = schema_location
        if type is not None:
            self.type = type

    @property
    def description(self):
        """Gets the description of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        Description of the specification  # noqa: E501

        :return: The description of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PartyPrivacyProfileSpecificationUpdate.

        Description of the specification  # noqa: E501

        :param description: The description of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def last_update(self):
        """Gets the last_update of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        Date and time when the specification was last updated  # noqa: E501

        :return: The last_update of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this PartyPrivacyProfileSpecificationUpdate.

        Date and time when the specification was last updated  # noqa: E501

        :param last_update: The last_update of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def name(self):
        """Gets the name of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        Name of the specification  # noqa: E501

        :return: The name of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PartyPrivacyProfileSpecificationUpdate.

        Name of the specification  # noqa: E501

        :param name: The name of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        Lifecycle status of the specification (e.g. In Design, Active, Rejected, Retired)  # noqa: E501

        :return: The status of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PartyPrivacyProfileSpecificationUpdate.

        Lifecycle status of the specification (e.g. In Design, Active, Rejected, Retired)  # noqa: E501

        :param status: The status of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        The version of the specification, in case it is desired to maintain multiple versions of profile specifications  # noqa: E501

        :return: The version of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PartyPrivacyProfileSpecificationUpdate.

        The version of the specification, in case it is desired to maintain multiple versions of profile specifications  # noqa: E501

        :param version: The version of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def applicable_role(self):
        """Gets the applicable_role of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        A list of roles to which this specification can apply. For example: Shop Agent, Call Center Agent.  # noqa: E501

        :return: The applicable_role of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: list[PartyPrivacyRoleSpecification]
        """
        return self._applicable_role

    @applicable_role.setter
    def applicable_role(self, applicable_role):
        """Sets the applicable_role of this PartyPrivacyProfileSpecificationUpdate.

        A list of roles to which this specification can apply. For example: Shop Agent, Call Center Agent.  # noqa: E501

        :param applicable_role: The applicable_role of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: list[PartyPrivacyRoleSpecification]
        """

        self._applicable_role = applicable_role

    @property
    def party_privacy_profile_spec_characteristic(self):
        """Gets the party_privacy_profile_spec_characteristic of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        List of characteristics of the specification, whose values would typically be supplied when the profile is instantiated  # noqa: E501

        :return: The party_privacy_profile_spec_characteristic of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: list[PartyPrivacyProfileSpecificationCharacteristic]
        """
        return self._party_privacy_profile_spec_characteristic

    @party_privacy_profile_spec_characteristic.setter
    def party_privacy_profile_spec_characteristic(self, party_privacy_profile_spec_characteristic):
        """Sets the party_privacy_profile_spec_characteristic of this PartyPrivacyProfileSpecificationUpdate.

        List of characteristics of the specification, whose values would typically be supplied when the profile is instantiated  # noqa: E501

        :param party_privacy_profile_spec_characteristic: The party_privacy_profile_spec_characteristic of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: list[PartyPrivacyProfileSpecificationCharacteristic]
        """

        self._party_privacy_profile_spec_characteristic = party_privacy_profile_spec_characteristic

    @property
    def product_offering(self):
        """Gets the product_offering of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501


        :return: The product_offering of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: list[ProductOfferingRef]
        """
        return self._product_offering

    @product_offering.setter
    def product_offering(self, product_offering):
        """Sets the product_offering of this PartyPrivacyProfileSpecificationUpdate.


        :param product_offering: The product_offering of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: list[ProductOfferingRef]
        """

        self._product_offering = product_offering

    @property
    def related_party(self):
        """Gets the related_party of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        List of parties or party roles involved in the definition or management of the specification  # noqa: E501

        :return: The related_party of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: list[RelatedParty]
        """
        return self._related_party

    @related_party.setter
    def related_party(self, related_party):
        """Sets the related_party of this PartyPrivacyProfileSpecificationUpdate.

        List of parties or party roles involved in the definition or management of the specification  # noqa: E501

        :param related_party: The related_party of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: list[RelatedParty]
        """

        self._related_party = related_party

    @property
    def valid_for(self):
        """Gets the valid_for of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        The period of time for which the specification is valid  # noqa: E501

        :return: The valid_for of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: TimePeriod
        """
        return self._valid_for

    @valid_for.setter
    def valid_for(self, valid_for):
        """Sets the valid_for of this PartyPrivacyProfileSpecificationUpdate.

        The period of time for which the specification is valid  # noqa: E501

        :param valid_for: The valid_for of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: TimePeriod
        """

        self._valid_for = valid_for

    @property
    def base_type(self):
        """Gets the base_type of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        When sub-classing, this defines the super-class  # noqa: E501

        :return: The base_type of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type):
        """Sets the base_type of this PartyPrivacyProfileSpecificationUpdate.

        When sub-classing, this defines the super-class  # noqa: E501

        :param base_type: The base_type of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: str
        """

        self._base_type = base_type

    @property
    def schema_location(self):
        """Gets the schema_location of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        A URI to a JSON-Schema file that defines additional attributes and relationships  # noqa: E501

        :return: The schema_location of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._schema_location

    @schema_location.setter
    def schema_location(self, schema_location):
        """Sets the schema_location of this PartyPrivacyProfileSpecificationUpdate.

        A URI to a JSON-Schema file that defines additional attributes and relationships  # noqa: E501

        :param schema_location: The schema_location of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: str
        """

        self._schema_location = schema_location

    @property
    def type(self):
        """Gets the type of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501

        When sub-classing, this defines the sub-class entity name  # noqa: E501

        :return: The type of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PartyPrivacyProfileSpecificationUpdate.

        When sub-classing, this defines the sub-class entity name  # noqa: E501

        :param type: The type of this PartyPrivacyProfileSpecificationUpdate.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartyPrivacyProfileSpecificationUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartyPrivacyProfileSpecificationUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
